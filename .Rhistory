}
if ((D_upper == Inf) == TRUE) {
deriv_val <- numDeriv::grad(func = log_f, x = x_upper, method = "Richardson")
if ((deriv_val >= 0) == TRUE) print("Derivative at x_k must be negative")
}
}
}
}
getwd()
setwd("./ars")
document()
setwd("..")
install("ars")
library(ars)
help(ars)
install("ars")
library(ars)
help(ars)
.rs.restartR()
.rs.restartR()
.rs.restartR()
library(devtools)
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
.rs.restartR()
rm(list = ls())
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
.rs.restartR()
library(devtools)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
rm(list = ls())
install_github("kaiwei-berkeley/ars",force = T)
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
if(length(exp(l(x)-u(x)))!= 1| is.na(exp(l(x)-u(x)))){
stop("Generated numbers that exceed machine maximum, try to run again or modify the input h(x)")
}
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
is.na(NA)
is.na(NULL)
T = NULL
T == NULL
T == NA
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
install_github("kaiwei-berkeley/ars",force = T)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
rm(list = ls())
install_github("kaiwei-berkeley/ars",force = T)
getwd()
setwd("./ars")
document()
setwd("..")
getwd()
setwd("./ars")
document()
document()
document()
load_all()
getwd()
load_all()
document()
getwd()
document()
load_all()
load_all()
getwd()
getwd()
load_all()
load_all()
document()
getwd()
load_all()
document()
setwd("..")
install("ars")
library(ars)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
?findInterval
rm(list = ls())
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
getwd()
setwd("./ars")
document()
.rs.restartR()
rm(list = ls())
detach_package(rlang)
detach("package:rlang", unload=TRUE)
detach("package:testthat", unload=TRUE)
detach("package:rlang", unload=TRUE)
detach("package:numDeriv", unload=TRUE)
rm(list = ls())
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
library("roxygen2")
library(testthat)
library(devtools)
install.packages("digest")
library("digest")
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
getwd()
setwd("..")
getwd()
.rs.restartR()
detach(package:numDeriv, unload=TRUE)
detach(package:ars, unload=TRUE)
rm(list = ls())
detach(package:numDeriv, unload=TRUE)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
help(ars)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
.rs.restartR()
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
ars(h = function(x){-x^2},-3,-5,100)
ars(h = function(x){-x^2},-3,0,100)
ars(h = function(x){dnorm(x)},-3,0,100)
test_package('ars')
# Compare against R's ars package
f = function(x) {dnorm(x, mean=0, sd=1)}
start = -Inf
end = Inf
nsamples <- 5000
microbenchmark(
ars(f, start = start, end = end, N = nsamples, k=4),
times=5)
library(microbenchmark)
microbenchmark(
ars(f, start = start, end = end, N = nsamples, k=4),
times=5)
f<-function(x,mu=0,sigma=1){-1/(2*sigma^2)*(x-mu)^2}
fprima<-function(x,mu=0,sigma=1){-1/sigma^2*(x-mu)}
microbenchmark(
ars(nsamples, f, fprima, mu=0, sigma=1),
times=5)
f<-function(x,mu=0,sigma=1){-1/(2*sigma^2)*(x-mu)^2}
fprima<-function(x,mu=0,sigma=1){-1/sigma^2*(x-mu)}
microbenchmark(
ars(nsamples, f, fprima, mu=0, sigma=1),
times=5)
library(ars)
f<-function(x,mu=0,sigma=1){-1/(2*sigma^2)*(x-mu)^2}
fprima<-function(x,mu=0,sigma=1){-1/sigma^2*(x-mu)}
microbenchmark(
ars(nsamples, f, fprima, mu=0, sigma=1),
times=5)
install.packages("ars")
install.packages("ars")
library(ars)
f<-function(x,mu=0,sigma=1){-1/(2*sigma^2)*(x-mu)^2}
fprima<-function(x,mu=0,sigma=1){-1/sigma^2*(x-mu)}
x2  = microbenchmark(
ars(nsamples, f, fprima, mu=0, sigma=1),
times=5)
library(microbenchmark)
f<-function(x,mu=0,sigma=1){-1/(2*sigma^2)*(x-mu)^2}
fprima<-function(x,mu=0,sigma=1){-1/sigma^2*(x-mu)}
x2  = microbenchmark(
ars(nsamples, f, fprima, mu=0, sigma=1),
times=5)
x2
# Compare against R's ars package
install_github("kaiwei-berkeley/ars",force = T)
# Compare against R's ars package
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
install_github("kaiwei-berkeley/ars",force = T)
# Compare against R's ars package
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
install_github("kaiwei-berkeley/ars",force = T)
# Compare against R's ars package
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
rm(list = ls())
.rs.restartR()
install_github("kaiwei-berkeley/ars",force = T)
getwd()
document()
library(devtools)
library(testthat)
library("roxygen2")
document()
# Code benchmark
.rs.restartR()
rm(list = ls())
library(ars)
install_github("kaiwei-berkeley/ars",force = T)
detach("package:ars", unload=TRUE)
detach("package:numDeriv", unload=TRUE)
install_github("kaiwei-berkeley/ars",force = T)
getwd()
setwd("..")
install("ars")
