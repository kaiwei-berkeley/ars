sample = ars(h = h,start = 0 , end = Inf,N = 100,k = 3)
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 100,k = 3)
sample = ars(h = h,start = 0 , end = Inf,N = 100,k = 3)
sample = ars(h = h,start = 0 , end = Inf,N = 100,k = 3)
install("ars")
library(ars)
h = function(x){dnorm(x,mean = 0,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 100,k = 3)
plot(density(sample))
test_package('ars')
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
h = function(x){dnorm(x,mean = 0,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
hist(sample, prob = T, breaks = seq(min(sample),max(sample), length = 100))
ks.test(sample, rnorm(5000,mean = 200,sd = 1))
ks.test(sample, rnorm(5000,mean = 0,sd = 1))
h = function(x) {dexp(x,rate =1 )}
start = 0
end = Inf
sample = ars(h = h,start = 0 , end = Inf,N = 10000,k = 3)
plot(density(sample))
ks.test(sample, rexp(1000,rate = 1))
h = function(x){dnorm(x,mean = 200,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 200,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 200,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
ks.test(sample, rnorm(5000,mean = 200,sd = 1))
h = function(x){dnorm(x,mean = 200,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
ks.test(sample, rnorm(5000,mean = 200,sd = 1))
h = function(x){dnorm(x,mean = 200,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
ks.test(sample, rnorm(5000,mean = 200,sd = 1))
h = function(x){dnorm(x,mean = 200,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
ks.test(sample, rnorm(5000,mean = 200,sd = 1))
domain_check <- function(log_f,D_lower, D_upper, x_lower, x_upper) {
if ((D_lower > D_upper)==TRUE) print("Invalid domain")
else {
# here we force the user to input x_lower (x_1) and x_upper (x_k) to be valid
if (x_lower >= x_upper || is.infinite(x_lower) || is.infinite(x_upper)
|| x_lower < D_lower || x_upper > D_upper) print("Invalid lower and upper values")
else {
if ((D_lower == -Inf) == TRUE) {
deriv_val <- numDeriv::grad(func = log_f,
x = x_lower, method = "Richardson")
if ((deriv_val <= 0) == TRUE) print("Derivative at x_1 must be positive")
}
if ((D_upper == Inf) == TRUE) {
deriv_val <- numDeriv::grad(func = log_f, x = x_upper, method = "Richardson")
if ((deriv_val >= 0) == TRUE) print("Derivative at x_k must be negative")
}
}
}
}
getwd()
setwd("./ars")
document()
setwd("..")
install("ars")
library(ars)
help(ars)
install("ars")
library(ars)
help(ars)
.rs.restartR()
.rs.restartR()
.rs.restartR()
library(devtools)
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
.rs.restartR()
rm(list = ls())
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
.rs.restartR()
library(devtools)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
rm(list = ls())
install_github("kaiwei-berkeley/ars",force = T)
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 50,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
if(length(exp(l(x)-u(x)))!= 1| is.na(exp(l(x)-u(x)))){
stop("Generated numbers that exceed machine maximum, try to run again or modify the input h(x)")
}
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
is.na(NA)
is.na(NULL)
T = NULL
T == NULL
T == NA
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
.rs.restartR()
rm(list = ls())
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
.rs.restartR()
install_github("kaiwei-berkeley/ars",force = T)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
rm(list = ls())
install_github("kaiwei-berkeley/ars",force = T)
getwd()
setwd("./ars")
document()
setwd("..")
getwd()
setwd("./ars")
document()
document()
document()
load_all()
getwd()
load_all()
document()
getwd()
document()
load_all()
load_all()
getwd()
getwd()
load_all()
load_all()
document()
getwd()
load_all()
document()
setwd("..")
install("ars")
library(ars)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
?findInterval
rm(list = ls())
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
getwd()
setwd("./ars")
document()
.rs.restartR()
rm(list = ls())
detach_package(rlang)
detach("package:rlang", unload=TRUE)
detach("package:testthat", unload=TRUE)
detach("package:rlang", unload=TRUE)
detach("package:numDeriv", unload=TRUE)
rm(list = ls())
library(devtools)
install_github("kaiwei-berkeley/ars",force = T)
library("roxygen2")
library(testthat)
library(devtools)
install.packages("digest")
library("digest")
library(devtools)
library(testthat)
library("roxygen2")
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
h = function(x){dnorm(x,mean = 500,sd = 1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
getwd()
setwd("..")
getwd()
.rs.restartR()
detach(package:numDeriv, unload=TRUE)
detach(package:ars, unload=TRUE)
rm(list = ls())
detach(package:numDeriv, unload=TRUE)
install_github("kaiwei-berkeley/ars",force = T)
library(ars)
h = function(x){dnorm(x,50,1)}
sample = ars(h = h,start = -Inf , end = Inf,N = 5000,k = 3)
plot(density(sample))
help(ars)
test_package('ars')
